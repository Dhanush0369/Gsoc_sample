/*
 * Data Repository Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: ga4gh-cloud@ga4gh.org
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessMethod {
    /// Type of the access method.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "access_url", skip_serializing_if = "Option::is_none")]
    pub access_url: Option<Box<models::AccessMethodAccessUrl>>,
    /// An arbitrary string to be passed to the `/access` method to get an `AccessURL`. This string must be unique within the scope of a single object. Note that at least one of `access_url` and `access_id` must be provided.
    #[serde(rename = "access_id", skip_serializing_if = "Option::is_none")]
    pub access_id: Option<String>,
    /// Name of the region in the cloud service provider that the object belongs to.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "authorizations", skip_serializing_if = "Option::is_none")]
    pub authorizations: Option<Box<models::AccessMethodAuthorizations>>,
}

impl AccessMethod {
    pub fn new(r#type: Type) -> AccessMethod {
        AccessMethod {
            r#type,
            access_url: None,
            access_id: None,
            region: None,
            authorizations: None,
        }
    }
}
/// Type of the access method.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "s3")]
    S3,
    #[serde(rename = "gs")]
    Gs,
    #[serde(rename = "ftp")]
    Ftp,
    #[serde(rename = "gsiftp")]
    Gsiftp,
    #[serde(rename = "globus")]
    Globus,
    #[serde(rename = "htsget")]
    Htsget,
    #[serde(rename = "https")]
    Https,
    #[serde(rename = "file")]
    File,
}

impl Default for Type {
    fn default() -> Type {
        Self::S3
    }
}

