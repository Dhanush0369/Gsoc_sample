/*
 * Data Repository Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: ga4gh-cloud@ga4gh.org
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DrsObject {
    /// An identifier unique to this `DrsObject`
    #[serde(rename = "id")]
    pub id: String,
    /// A string that can be used to name a `DrsObject`. This string is made up of uppercase and lowercase letters, decimal digits, hyphen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A drs:// hostname-based URI, as defined in the DRS documentation, that tells clients how to access this object. The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.  For example, if you arrive at this DRS JSON by resolving a compact identifier-based DRS URI, the `self_uri` presents you with a hostname and properly encoded DRS ID for use in subsequent `access` endpoint calls.
    #[serde(rename = "self_uri")]
    pub self_uri: String,
    /// For blobs, the blob size in bytes. For bundles, the cumulative size, in bytes, of items in the `contents` field.
    #[serde(rename = "size")]
    pub size: i64,
    /// Timestamp of content creation in RFC3339. (This is the creation time of the underlying content, not of the JSON object.)
    #[serde(rename = "created_time")]
    pub created_time: String,
    /// Timestamp of content update in RFC3339, identical to `created_time` in systems that do not support updates. (This is the update time of the underlying content, not of the JSON object.)
    #[serde(rename = "updated_time", skip_serializing_if = "Option::is_none")]
    pub updated_time: Option<String>,
    /// A string representing a version. (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// A string providing the mime-type of the `DrsObject`.
    #[serde(rename = "mime_type", skip_serializing_if = "Option::is_none")]
    pub mime_type: Option<String>,
    /// The checksum of the `DrsObject`. At least one checksum must be provided. For blobs, the checksum is computed over the bytes in the blob. For bundles, the checksum is computed over a sorted concatenation of the checksums of its top-level contained objects (not recursive, names not included). The list of checksums is sorted alphabetically (hex-code) before concatenation and a further checksum is performed on the concatenated checksum value. For example, if a bundle contains blobs with the following checksums: md5(blob1) = 72794b6d md5(blob2) = 5e089d29 Then the checksum of the bundle is: md5( concat( sort( md5(blob1), md5(blob2) ) ) ) = md5( concat( sort( 72794b6d, 5e089d29 ) ) ) = md5( concat( 5e089d29, 72794b6d ) ) = md5( 5e089d2972794b6d ) = f7a29a04
    #[serde(rename = "checksums")]
    pub checksums: Vec<models::Checksum>,
    /// The list of access methods that can be used to fetch the `DrsObject`. Required for single blobs; optional for bundles.
    #[serde(rename = "access_methods", skip_serializing_if = "Option::is_none")]
    pub access_methods: Option<Vec<models::AccessMethod>>,
    /// If not set, this `DrsObject` is a single blob. If set, this `DrsObject` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).
    #[serde(rename = "contents", skip_serializing_if = "Option::is_none")]
    pub contents: Option<Vec<models::ContentsObject>>,
    /// A human readable description of the `DrsObject`.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A list of strings that can be used to find other metadata about this `DrsObject` from external metadata sources. These aliases can be used to represent secondary accession numbers or external GUIDs.
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<String>>,
}

impl DrsObject {
    pub fn new(id: String, self_uri: String, size: i64, created_time: String, checksums: Vec<models::Checksum>) -> DrsObject {
        DrsObject {
            id,
            name: None,
            self_uri,
            size,
            created_time,
            updated_time: None,
            version: None,
            mime_type: None,
            checksums,
            access_methods: None,
            contents: None,
            description: None,
            aliases: None,
        }
    }
}

